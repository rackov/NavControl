// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceInfo_IsEmpty_FullMethodName           = "/proto.ServiceInfo/IsEmpty"
	ServiceInfo_GetInfo_FullMethodName           = "/proto.ServiceInfo/GetInfo"
	ServiceInfo_GetServiceManager_FullMethodName = "/proto.ServiceInfo/GetServiceManager"
	ServiceInfo_GetLogLevel_FullMethodName       = "/proto.ServiceInfo/GetLogLevel"
	ServiceInfo_SetLogLevel_FullMethodName       = "/proto.ServiceInfo/SetLogLevel"
	ServiceInfo_ReadLogs_FullMethodName          = "/proto.ServiceInfo/ReadLogs"
)

// ServiceInfoClient is the client API for ServiceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Общий сервис для получения информации о сервисе
type ServiceInfoClient interface {
	IsEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsEmptyVar, error)
	GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceInfoResponse, error)
	GetServiceManager(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceManager, error)
	// ----  сервис для управления логированием на любом из сервисов
	// Получить текущий уровень логирования
	GetLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLevelResponse, error)
	// Установить уровень логирования
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
	// ReadLogs читает логи с применением фильтров
	ReadLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error)
}

type serviceInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInfoClient(cc grpc.ClientConnInterface) ServiceInfoClient {
	return &serviceInfoClient{cc}
}

func (c *serviceInfoClient) IsEmpty(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*IsEmptyVar, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsEmptyVar)
	err := c.cc.Invoke(ctx, ServiceInfo_IsEmpty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) GetInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceInfoResponse)
	err := c.cc.Invoke(ctx, ServiceInfo_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) GetServiceManager(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ServiceManager, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceManager)
	err := c.cc.Invoke(ctx, ServiceInfo_GetServiceManager_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) GetLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogLevelResponse)
	err := c.cc.Invoke(ctx, ServiceInfo_GetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, ServiceInfo_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInfoClient) ReadLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadLogsResponse)
	err := c.cc.Invoke(ctx, ServiceInfo_ReadLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInfoServer is the server API for ServiceInfo service.
// All implementations must embed UnimplementedServiceInfoServer
// for forward compatibility.
//
// Общий сервис для получения информации о сервисе
type ServiceInfoServer interface {
	IsEmpty(context.Context, *emptypb.Empty) (*IsEmptyVar, error)
	GetInfo(context.Context, *emptypb.Empty) (*ServiceInfoResponse, error)
	GetServiceManager(context.Context, *emptypb.Empty) (*ServiceManager, error)
	// ----  сервис для управления логированием на любом из сервисов
	// Получить текущий уровень логирования
	GetLogLevel(context.Context, *emptypb.Empty) (*LogLevelResponse, error)
	// Установить уровень логирования
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	// ReadLogs читает логи с применением фильтров
	ReadLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error)
	mustEmbedUnimplementedServiceInfoServer()
}

// UnimplementedServiceInfoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceInfoServer struct{}

func (UnimplementedServiceInfoServer) IsEmpty(context.Context, *emptypb.Empty) (*IsEmptyVar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEmpty not implemented")
}
func (UnimplementedServiceInfoServer) GetInfo(context.Context, *emptypb.Empty) (*ServiceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedServiceInfoServer) GetServiceManager(context.Context, *emptypb.Empty) (*ServiceManager, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceManager not implemented")
}
func (UnimplementedServiceInfoServer) GetLogLevel(context.Context, *emptypb.Empty) (*LogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogLevel not implemented")
}
func (UnimplementedServiceInfoServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedServiceInfoServer) ReadLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLogs not implemented")
}
func (UnimplementedServiceInfoServer) mustEmbedUnimplementedServiceInfoServer() {}
func (UnimplementedServiceInfoServer) testEmbeddedByValue()                     {}

// UnsafeServiceInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInfoServer will
// result in compilation errors.
type UnsafeServiceInfoServer interface {
	mustEmbedUnimplementedServiceInfoServer()
}

func RegisterServiceInfoServer(s grpc.ServiceRegistrar, srv ServiceInfoServer) {
	// If the following call pancis, it indicates UnimplementedServiceInfoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceInfo_ServiceDesc, srv)
}

func _ServiceInfo_IsEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).IsEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_IsEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).IsEmpty(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).GetInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_GetServiceManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).GetServiceManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_GetServiceManager_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).GetServiceManager(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_GetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).GetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_GetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).GetLogLevel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInfo_ReadLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInfoServer).ReadLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceInfo_ReadLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInfoServer).ReadLogs(ctx, req.(*ReadLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceInfo_ServiceDesc is the grpc.ServiceDesc for ServiceInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ServiceInfo",
	HandlerType: (*ServiceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsEmpty",
			Handler:    _ServiceInfo_IsEmpty_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _ServiceInfo_GetInfo_Handler,
		},
		{
			MethodName: "GetServiceManager",
			Handler:    _ServiceInfo_GetServiceManager_Handler,
		},
		{
			MethodName: "GetLogLevel",
			Handler:    _ServiceInfo_GetLogLevel_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _ServiceInfo_SetLogLevel_Handler,
		},
		{
			MethodName: "ReadLogs",
			Handler:    _ServiceInfo_ReadLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
