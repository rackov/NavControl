syntax = "proto3";

package proto;

option go_package = "NavControl/proto";
import "google/protobuf/empty.proto";

// Общий сервис для управления логированием на любом из сервисов
service LoggingControl {
  // Получить текущий уровень логирования
  rpc GetLogLevel(google.protobuf.Empty) returns (LogLevelResponse);
  // Установить уровень логирования
    rpc SetLogLevel(SetLogLevelRequest) returns (SetLogLevelResponse);
    // ReadLogs читает логи с применением фильтров
    rpc ReadLogs(ReadLogsRequest) returns (ReadLogsResponse);
}
// Ответ с текущим уровнем логирования
message LogLevelResponse {
  string level = 1;
  bool success = 2;
  string message = 3;
}
// Эти сообщения теперь общие и могут использоваться в других .proto файлах
message SetLogLevelRequest {
  string level = 1; // debug, info, warn, error, fatal, panic
}

message SetLogLevelResponse {
  bool success = 1;
}


// --- Сообщения для запроса и ответа логов ---

// Запрос на чтение логов
message ReadLogsRequest {
  // Фильтр по уровню логирования (DEBUG, INFO, WARN, ERROR).
  // Если не указан, читаются логи всех уровней.
  string level = 1;
  
  // Фильтр по начальной дате (Unix timestamp в секундах).
  // Если не указан, читается с самого начала файла.
  int64 start_date = 2;
  
  // Фильтр по конечной дате (Unix timestamp в секундах).
  // Если не указан, читается до конца файла.
  int64 end_date = 3;
  
  // Максимальное количество строк для возврата.
  // Если не указан или 0, возвращаются все найденные строки (осторожно с большими файлами).
  int32 limit = 4;
}

// Ответ с прочитанными логами
message ReadLogsResponse {
  bool success = 1;
  string message = 2; // Сообщение об ошибке или статус
  
  // Сами строки логов
  repeated string log_lines = 3;
}