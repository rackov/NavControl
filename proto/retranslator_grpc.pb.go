// Синтаксис Protocol Buffers v3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: retranslator.proto

// Пакет для Go

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RetranslatorControl_AddClient_FullMethodName     = "/proto.RetranslatorControl/AddClient"
	RetranslatorControl_UpdateClient_FullMethodName  = "/proto.RetranslatorControl/UpdateClient"
	RetranslatorControl_ListClient_FullMethodName    = "/proto.RetranslatorControl/ListClient"
	RetranslatorControl_UpClient_FullMethodName      = "/proto.RetranslatorControl/UpClient"
	RetranslatorControl_DownClient_FullMethodName    = "/proto.RetranslatorControl/DownClient"
	RetranslatorControl_DeleteClient_FullMethodName  = "/proto.RetranslatorControl/DeleteClient"
	RetranslatorControl_GetInfoClient_FullMethodName = "/proto.RetranslatorControl/GetInfoClient"
	RetranslatorControl_ListDevices_FullMethodName   = "/proto.RetranslatorControl/ListDevices"
)

// RetranslatorControlClient is the client API for RetranslatorControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RetranslatorControlClient interface {
	AddClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	UpdateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error)
	ListClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Clients, error)
	UpClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error)
	DownClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error)
	DeleteClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error)
	GetInfoClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error)
	ListDevices(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Devices, error)
}

type retranslatorControlClient struct {
	cc grpc.ClientConnInterface
}

func NewRetranslatorControlClient(cc grpc.ClientConnInterface) RetranslatorControlClient {
	return &retranslatorControlClient{cc}
}

func (c *retranslatorControlClient) AddClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_AddClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) UpdateClient(ctx context.Context, in *Client, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_UpdateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) ListClient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Clients, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Clients)
	err := c.cc.Invoke(ctx, RetranslatorControl_ListClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) UpClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_UpClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) DownClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_DownClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) DeleteClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_DeleteClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) GetInfoClient(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Client)
	err := c.cc.Invoke(ctx, RetranslatorControl_GetInfoClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *retranslatorControlClient) ListDevices(ctx context.Context, in *SetClient, opts ...grpc.CallOption) (*Devices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Devices)
	err := c.cc.Invoke(ctx, RetranslatorControl_ListDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RetranslatorControlServer is the server API for RetranslatorControl service.
// All implementations must embed UnimplementedRetranslatorControlServer
// for forward compatibility.
type RetranslatorControlServer interface {
	AddClient(context.Context, *Client) (*Client, error)
	UpdateClient(context.Context, *Client) (*Client, error)
	ListClient(context.Context, *emptypb.Empty) (*Clients, error)
	UpClient(context.Context, *SetClient) (*Client, error)
	DownClient(context.Context, *SetClient) (*Client, error)
	DeleteClient(context.Context, *SetClient) (*Client, error)
	GetInfoClient(context.Context, *SetClient) (*Client, error)
	ListDevices(context.Context, *SetClient) (*Devices, error)
	mustEmbedUnimplementedRetranslatorControlServer()
}

// UnimplementedRetranslatorControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRetranslatorControlServer struct{}

func (UnimplementedRetranslatorControlServer) AddClient(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddClient not implemented")
}
func (UnimplementedRetranslatorControlServer) UpdateClient(context.Context, *Client) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedRetranslatorControlServer) ListClient(context.Context, *emptypb.Empty) (*Clients, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClient not implemented")
}
func (UnimplementedRetranslatorControlServer) UpClient(context.Context, *SetClient) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpClient not implemented")
}
func (UnimplementedRetranslatorControlServer) DownClient(context.Context, *SetClient) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownClient not implemented")
}
func (UnimplementedRetranslatorControlServer) DeleteClient(context.Context, *SetClient) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedRetranslatorControlServer) GetInfoClient(context.Context, *SetClient) (*Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoClient not implemented")
}
func (UnimplementedRetranslatorControlServer) ListDevices(context.Context, *SetClient) (*Devices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedRetranslatorControlServer) mustEmbedUnimplementedRetranslatorControlServer() {}
func (UnimplementedRetranslatorControlServer) testEmbeddedByValue()                             {}

// UnsafeRetranslatorControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RetranslatorControlServer will
// result in compilation errors.
type UnsafeRetranslatorControlServer interface {
	mustEmbedUnimplementedRetranslatorControlServer()
}

func RegisterRetranslatorControlServer(s grpc.ServiceRegistrar, srv RetranslatorControlServer) {
	// If the following call pancis, it indicates UnimplementedRetranslatorControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RetranslatorControl_ServiceDesc, srv)
}

func _RetranslatorControl_AddClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).AddClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_AddClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).AddClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).UpdateClient(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_ListClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).ListClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_ListClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).ListClient(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_UpClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).UpClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_UpClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).UpClient(ctx, req.(*SetClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_DownClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).DownClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_DownClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).DownClient(ctx, req.(*SetClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).DeleteClient(ctx, req.(*SetClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_GetInfoClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).GetInfoClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_GetInfoClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).GetInfoClient(ctx, req.(*SetClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _RetranslatorControl_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RetranslatorControlServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RetranslatorControl_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RetranslatorControlServer).ListDevices(ctx, req.(*SetClient))
	}
	return interceptor(ctx, in, info, handler)
}

// RetranslatorControl_ServiceDesc is the grpc.ServiceDesc for RetranslatorControl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RetranslatorControl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RetranslatorControl",
	HandlerType: (*RetranslatorControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddClient",
			Handler:    _RetranslatorControl_AddClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _RetranslatorControl_UpdateClient_Handler,
		},
		{
			MethodName: "ListClient",
			Handler:    _RetranslatorControl_ListClient_Handler,
		},
		{
			MethodName: "UpClient",
			Handler:    _RetranslatorControl_UpClient_Handler,
		},
		{
			MethodName: "DownClient",
			Handler:    _RetranslatorControl_DownClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _RetranslatorControl_DeleteClient_Handler,
		},
		{
			MethodName: "GetInfoClient",
			Handler:    _RetranslatorControl_GetInfoClient_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _RetranslatorControl_ListDevices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "retranslator.proto",
}
